import sys

import matplotlib.pyplot as plt


def plot_los_val_loss(train_info: dict):
    """
    This function plots the loss and validation loss functions.
    Args:
        train_info: A dictionary that is keyed by epoch number and the values
            loss and validation loss for the mentioned epoch number.

    """
    plt.plot(train_info.keys(),
             [loss['loss'] for _, loss in train_info.items()],
             'r',
             label='loss')
    plt.plot(train_info.keys(),
             [val_loss['val_loss'] for _, val_loss in train_info.items()],
             'b',
             label='validation loss')
    plt.legend(loc="upper right")

    plt.show()


def get_train_data_from_txt(file_name: str):
    """
    A parser for the output data generated by
    Args:
        file_name: A string representing the file name (within the same directory).

    Returns:
        dict:  A dictionary that is keyed by epoch number and the values
            loss and validation loss for the mentioned epoch number.

    """

    with open(file_name, mode="r", newline=None) as input_file:
        input_data = [x.strip() for x in input_file.readlines()]

    data_dict = {}
    loss_no = -1
    val_loss_no = -1
    epoch_no = -1

    for el in input_data:
        if 'Epoch' in el and '/' in el:
            loss_no = -1
            val_loss_no = -1
            epoch_no = int(el.split(' ')[1].split('/')[0])
        if '[==============================]' in el:
            if 'loss' in el:

                loss_str = el[el.find('loss: ') + len('loss: '):]
                loss_no = ''
                for char in loss_str:
                    if char.isnumeric() or char == '.':
                        loss_no += char
                    else:
                        break
                loss_no = float(loss_no)
            if 'val_loss' in el:

                val_loss_str = el[el.find('val_loss: ') + len('val_loss: '):]
                val_loss_no = ''
                for char in val_loss_str:
                    if char.isnumeric() or char == '.':
                        val_loss_no += char
                    else:
                        break
                val_loss_no = float(val_loss_no)

        if -1 not in [epoch_no, loss_no, val_loss_no]:
            data_dict[epoch_no] = dict(loss=loss_no, val_loss=val_loss_no)

    return data_dict


def main():
    train_data_loss = get_train_data_from_txt('out.txt')
    plot_los_val_loss(train_data_loss)


if __name__ == '__main__':
    sys.exit(main())
